⍝⍝ APL session input for FizzBuzz
                      ⍝⍝ I think I can solve part 0 of this problem by creating two
                      ⍝⍝ arrays - one containing Fizzes and the other Buzzes, and 
                      ⍝⍝ then doing an item-by-item catenation.
          '' 'Fizz'
                      ⍝⍝ A 2-element array of one empty string and one containing 'Fizz'     
     ¯3↑  '' 'Fizz'
                      ⍝⍝ Take 3 items, from the right (pad on the left)
20⍴  ¯3↑  '' 'Fizz'
⍝ [THE] 20 reshape [OF THE] negative three take [OF] ('' 'Fizz')
                      ⍝⍝ APL order of execution is as in (f g x) of mathematics
                      ⍝⍝ NB: NO FUNCTION/OPERATOR PRECEDENCE
                      ⍝⍝ Repeat '' '' 'Fizz' until we have 20 elements
20⍴  ¯5↑ '' 'Buzz'
                      ⍝⍝ The same, producing 'Buzz' in every 5th position
                      ⍝⍝ So now we need to join each element of those lists
 (20⍴¯3↑'' 'Fizz') ,¨ (20⍴¯5↑'' 'Buzz')   ⍝ ,¨ is "catenate each"
{ (⍵⍴¯3↑'' 'Fizz') ,¨  (⍵⍴¯5↑'' 'Buzz')} 20

⍝ Part 2, produce the number, if it is not divisible by 3 or 5.
                      ⍝⍝ In the AO paradigm, it feels natural to take 
                      ⍝⍝ an array of integers as the argument
                      ⍝⍝ and replace the relevant items
input←1+⍳20
input
    3 | input         ⍝ "3 residue [OF] input"
    5 | input         ⍝ "5 residue input"
3 5 ∘.| input         ⍝ ∘.× would be "outer product"
                      ⍝⍝ ∘.f combines every element on left with every element on right
0 = 5 3 ∘.| input     ⍝ "0 equals 5 3 Outer Residue input"
                      ⍝⍝ Dhaval asks: is that equivalent to the Outer Product in mathematics?
                      ⍝⍝ Numbers divisible by 5 or 3
2⊥1 1 0               ⍝ "2 base value 1 1 0"
⍝ The value of polynomial with coeffients (1 1 0) for x=2
⍝ Or: digits (1 1 0) interpreted as a base 2 number
⎕←case← 2⊥ 0 = 5 3 ∘.| input ⍝ "base 2 value of each column of ... (above)"
                      ⍝⍝ 1=Fizz, 2=Buzz, 3=FizzBuzz
                      ⍝⍝ Dhaval: What is that square doing?
  case~0 ⍝ "case without 0": case values for divisible cases
words←'' 'Fizz' 'Buzz' 'FizzBuzz'
                      ⍝⍝ APL allows indexing by an array, returning an array of 
                      ⍝⍝ the same shape as the array of indices
words[case~0]
                      ⍝⍝ Desired texts for all divisible numbers
words[case~0]@{case≠0} input  ⍝ "words where case≠0 in input"
                      ⍝⍝ Replace all divisible numbers by corresponding texts
]load ./ControlFlowAndDataDriven/FizzBuzz/FizzBuzz -nolink
FizzBuzz
FizzBuzz 1+⍳20
FizzBuzz 1 2 3 4 5 35 105 777
⍝ No loops, no control flow: shape of input data drives all function applications

]load ./ControlFlowAndDataDriven/FizzBuzz/FizzBuzz3 -nolink
FizzBuzz3
{∊¨(⌽¨,⍳(≢⍵)/2)/¨⊂⍵} 'Fizz' 'Buzz' 'Bleep'